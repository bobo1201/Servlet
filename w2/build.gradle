plugins {
    id 'java'
    id 'war'
}

group 'org.zerock'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // https://mvnrepository.com/artifact/com.mysql/mysql-connector-j
    implementation group: 'com.mysql', name: 'mysql-connector-j', version: '8.0.33'

    // lombok 추가
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    // HikariCP 이용 (Connection 생성)
    implementation group : 'com.zaxxer', name: 'HikariCP', version:'5.0.0'
    // 이용하기 위해서 HikariConfig 타입의 객체 생성 필요
    // HikariDataSource라는 객체를 생성
    // getConnection()을 제공하므로 Connection 객체를 얻어서 사용할 수 있음

    // DTO → VO, VO → DTO 변환은 ModelMapper 라이브러리 이용
    implementation group : 'org.modelmapper', name: 'modelmapper', version: '3.0.0'

    // log4j 사용하기 위한 파일 추가
    implementation group : 'org.apache.logging.log4j', name:'log4j-core', version:'2.17.2'
    implementation group : 'org.apache.logging.log4j', name:'log4j-api', version:'2.17.2'
    implementation group : 'org.apache.logging.log4j', name:'log4j-slf4j-impl', version:'2.17.2'
    
    // test에서 log4j2 기능 활용하기 위해 어노테이션 설정 추가
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version:'1.18.24'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.24'

    // JSTL 라이브러리 추가
    // JSP에서 자주 사용되는 태그들의 집합
    implementation group: 'jstl', name: 'jstl', version: '1.2'
}

test {
    useJUnitPlatform()
}